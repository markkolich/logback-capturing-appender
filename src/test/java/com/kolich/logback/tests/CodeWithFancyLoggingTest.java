/**
 * Copyright (c) 2015 Mark S. Kolich
 * http://mark.koli.ch
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

package com.kolich.logback.tests;

import ch.qos.logback.classic.Level;
import com.kolich.logback.CodeWithFancyLogging;
import com.kolich.logback.LogbackCapturingAppender;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

import static org.junit.Assert.*;

public final class CodeWithFancyLoggingTest {

    private LogbackCapturingAppender capturingAppender_ = null;

    private final CodeWithFancyLogging soFancyHuh_ = CodeWithFancyLogging.getInstance();

    /**
     * Before every unit test, attach ourselves to the logger used by the {@link CodeWithFancyLogging}
     * class.  This allows our unit tests to capture any log "output" generated by the class under test to
     * verify that it is logging correctly.
     */
    @Before
    public void before() {
        final Logger fancyLogger = LoggerFactory.getLogger(CodeWithFancyLogging.class);
        // Inject ourselves into the "fancy logger".
        capturingAppender_ = LogbackCapturingAppender.Factory.attach(fancyLogger);
    }

    /**
     * After every unit test, detach ourselves from the logger.  This effectively clears any logging
     * that was previously captured so we start fresh every time.
     */
    @After
    public void after() {
        LogbackCapturingAppender.Factory.detach();
    }

    @Test
    public void saneLoggerTest() {
        // Do stuff, generate an INFO event.
        soFancyHuh_.doStuff(11, 89, 981);

        // Given the input above, we expect some special formatted logging output.
        final String message = capturingAppender_.getFirstMessage();
        assertEquals("11          89          0000981", message);

        // We expect the input above to be logged as INFO.
        final Level level = capturingAppender_.getFirstLevel();
        assertEquals(Level.INFO, level);
    }

    @Test
    public void emptyLoggerTest() {
        // An appender with no logging events better be empty.
        final List<String> messages = capturingAppender_.getMessages();
        assertTrue(messages.isEmpty());
        final List<Level> levels = capturingAppender_.getLevels();
        assertTrue(levels.isEmpty());

        // The first message and logging level should be empty too.
        assertNull(capturingAppender_.getFirstMessage());
        assertNull(capturingAppender_.getFirstLevel());
    }

    @Test
    public void loggerTestMultipleEvents() {
        for (int i = 0; i < 10; i++) {
            final int random = ThreadLocalRandom.current().nextInt(1, 10000);
            soFancyHuh_.doStuff(random, random, random);
        }

        // There should be 10 log events.
        final List<String> messages = capturingAppender_.getMessages();
        assertTrue(messages.size() == 10);
    }

    @Test
    public void errorTest() {
        // Forcibly throw out an ERROR event.
        soFancyHuh_.doError();

        final String message = capturingAppender_.getFirstMessage();
        assertEquals("OUCH!", message);

        final Level level = capturingAppender_.getFirstLevel();
        assertEquals(Level.ERROR, level);
    }

}
