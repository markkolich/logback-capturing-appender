/**
 * Copyright (c) 2015 Mark S. Kolich
 * http://mark.koli.ch
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

package com.kolich.logback.tests;

import ch.qos.logback.classic.Level;
import com.kolich.logback.CodeWithFancyLogging;
import com.kolich.logback.LogbackCapturingAppender;
import org.junit.AfterClass;
import org.junit.Test;
import org.slf4j.LoggerFactory;

import static org.junit.Assert.assertEquals;

public final class CodeWithFancyLoggingTest {

    /**
     * Attach ourselves to the logger used by the {@link CodeWithFancyLogging} class.  This allows
     * our unit tests to capture any log "output" generated by the class under test to verify
     * that it is logging correctly.
     */
    private final LogbackCapturingAppender capturingAppender_ = LogbackCapturingAppender.Factory
        .attach(LoggerFactory.getLogger(CodeWithFancyLogging.class));

    private final CodeWithFancyLogging soFancyHuh_ = CodeWithFancyLogging.getInstance();

    /**
     * After all tests have finished, detach ourselves.
     */
    @AfterClass
    public static void afterClass() {
        LogbackCapturingAppender.Factory.detach();
    }

    @Test
    public void loggerTest() {
        // Do stuff, generate an INFO event.
        soFancyHuh_.doStuff(11, 89, 981);

        // Given the input above, we expect some special formatted logging output.
        final String message = capturingAppender_.getCapturedLogMessage();
        assertEquals("11          89          0000981", message);

        // We expect the input above to be logged as INFO.
        final Level level = capturingAppender_.getCapturedLogLevel();
        assertEquals(Level.INFO, level);
    }

    @Test
    public void errorTest() {
        // Forcibly throw out an ERROR event.
        soFancyHuh_.doError();

        final String message = capturingAppender_.getCapturedLogMessage();
        assertEquals("OUCH!", message);

        final Level level = capturingAppender_.getCapturedLogLevel();
        assertEquals(Level.ERROR, level);
    }

}
